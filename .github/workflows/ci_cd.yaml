
name: Django-app workflow

on: [push, pull_request]

jobs:
  lint_tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install -r requirements.txt

    - name: Test with flake8
      run: |
        python -m flake8

  test:
    needs: lint_tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: python manage.py test

  build_and_push_to_docker_hub_backend:
    name: Push Docker image backend  to Docker Hub
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/habits_project:latest

  deploy:
    runs-on: ubuntu-latest
    needs:
      - lint_tests
      - test
      - build_and_push_to_docker_hub_backend
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          HOST: ${{ secrets.HOST }}
          USERNAME: ${{ secrets.USERNAME }}
          KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd DRF_Project_course
            sudo rm .env
            sudo touch .env
            echo "SECRET_KEY =${{ secrets.SECRET_KEY }}" >> .env
            echo "DEBUG = ${{ secrets.DEBUG }}" >> .env
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> .env
            echo PORT=${{ secrets.PORT }} >> .env
            echo STRIPE_API_KEY =${{ secrets.STRIPE_API_KEY }} >> .env
            echo E_MAIL =${{ secrets.EMAIL }} >> .env
            echo PASS_MAIL =${{ secrets.PASS_MAIL}} >> .env
            echo TELEGRAM_TOKEN =${{ secrets.TELEGRAM_TOKEN}} >> .env
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/habits_project:latest
            sudo docker compose stop
            sudo docker compose rm web
            sudo docker compose up -d
            sudo docker compose exec -T web python manage.py migrate
            
            sudo docker compose exec -T web python manage.py collectstatic --no-input
